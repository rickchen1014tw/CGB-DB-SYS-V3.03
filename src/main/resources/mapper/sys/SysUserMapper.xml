<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.db.sys.dao.SysUserDao">
	<!-- 當前命名空間使用二級緩存(參考官網映射文件的配置) -->
	<cache eviction="Lru" readOnly="true" flushInterval="60000"
		size="512" />
	<!-- 通過sql標簽提取共性 -->
	<sql id="queryWhereId">
		<where>
			<if test="username!=null and username!=''">
				username like concat("%",#{username},"%")
			</if>
		</where>
	</sql>

	<!-- 按條件統計總記錄數 -->
	<select id="getRowCount" resultType="int">
		select count(*)
		from sys_users
		<!-- 通過include標簽引入通過sql標簽定義的id -->
		<include refid="queryWhereId" />
	</select>

	<resultMap type="com.db.sys.vo.SysUserDeptVo"
		id="sysUserDeptVo">
		<!-- 基於部門id查詢部門信息，最後映射到SysUserDeptVo對象的sysDept屬性上 -->
		<!-- one2one,many2one -->
		<association property="sysDept" column="deptId"
			select="com.db.sys.dao.SysDeptDao.findById">
		</association>
	</resultMap>

	<!-- 查詢當前頁記錄 -->
	<select id="findPageObjects" resultMap="sysUserDeptVo">
		select *
		from sys_users
		<include refid="queryWhereId" />
		order by
		createdTime desc
		limit #{startIndex}, #{pageSize}
	</select>

	<!-- 修改用戶狀態 -->
	<update id="validById">
		update sys_users
		set valid=#{valid},
		modifiedUser=#{modifiedUser},
		modifiedTime=now()
		where id=#{id}
	</update>

	<!-- 1)useGeneratedKeys="true" 表示使用自動生成的主鍵值 2)keyProperty="id" 表示將主鍵值賦值給參數對象的id屬性(調用這個對象的setId()方法) -->
	<!--  
	<insert id="insertObject"
		parameterType="com.db.sys.entity.SysUser" 
		useGeneratedKeys="true"
		keyColumn="id">
		insert into sys_users
		(username,password,deptId,email,mobile,salt,valid,
		createdTime,modifiedTime,createdUser,modifiedUser)
		values
		(#{username},#{password},#{deptId},#{email},#{mobile},#{salt},#{valid},
		now(),now(),#{createdUser},#{modifiedUser})
	</insert>
	-->
 
	<insert id="insertObject" parameterType="com.db.sys.entity.SysUser" >
		<!-- selectKey一般用於獲取一個主鍵值
		     1)order 表示select操作在何時執行，如AFTER表示在insert之後
		     2)keyProperty 表示selectKey的結果映射到哪裡 -->
		<!-- 風險，在高併發執行時，同時執行insert，可能會拿到同樣的id值，
		自增長id在高併發執行時有風險，做分佈式的時候會有問題，一般做項目併發量比較大的，
		id不會用自增長，百度查分布式系统id生成，在實際業務時，id是一個難點-->     
		<selectKey order="AFTER" keyProperty="id" resultType="int">
			select last_insert_id()	
		</selectKey>
		insert into sys_users
		(username,password,deptId,email,mobile,salt,valid,
		createdTime,modifiedTime,createdUser,modifiedUser)
		values
		(#{username},#{password},#{deptId},#{email},#{mobile},#{salt},#{valid},
		now(),now(),#{createdUser},#{modifiedUser})
	</insert>
	
	<!-- 基於id獲取用戶以及對應的部門信息 -->
	<select id="findObjectById" resultMap="sysUserDeptVo" >
		select * 
		from sys_users
		where id=#{id}
	</select>

	<!-- 更新用戶自身信息 -->
	<!-- 這裡使用動態sql的方式，不用也可以 -->
	<update id="updateObject" parameterType="com.db.sys.entity.SysUser">
		update sys_users
		<set>
			<if test="username!=null and username!=''">
				username=#{username},
			</if>
			<if test="email!=null and email!=''">
				email=#{email},
			</if>
			<if test="mobile!=null and mobile!=''">
				mobile=#{mobile},
			</if>
			<if test="deptId!=null and deptId!=''">
				deptId=#{deptId},
			</if>

			<if test="modifiedUser!=null and modifiedUser!=''">
				modifiedUser=#{modifiedUser},
			</if>
			modifiedTime=now()
		</set>
		where id=#{id}
	</update>
	
	<select id="findUserByUserName" resultType="com.db.sys.entity.SysUser">
		select * 
		from sys_users
		where username=#{username}
	</select>
	
	<!-- 基於用戶id修改密碼 -->
	<update id="updatePassword">
		update sys_users
		set password=#{password},
			salt=#{salt},
			modifiedTime=now()
		where id=#{id}	
	</update>
	
</mapper>